maven: chuẩn group id
group id: sử dụng domain
artifactId: tên project

cau truc: main => java - resource - wepapp => WEB-INF

servlet: servlet api 
	<properties>
		<servlet.api.version>4.0.1</servlet.api.version>
	</properties>
	<dependency>
		<groupId>javax.servlet</groupId>
		<artifactId>javax.servlet-api</artifactId>
		<version>${servlet.api.version}</version>
		<scope>provided</scope>
	</dependency>
set war cho tomcat <packaging>war</packaging>

phat sinh loi ko co plugin

        <plugins>
	<build>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.2.2</version>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>

        </plugins>
    </build>
	
Thiet ke va quan ly database
session: cung cấp phương thức để thực thi câu truy vấn

tạo class servlet: extends HttpServlet

web: war , dùng cho server host chạy, tomcat trỏ vào deploy lên, tầng view
web-logic: jar, file chạy, tầng controler(servlet), model(command) - lớp trung gian

persistence-data: chứa các class map db, DTO, entiyu
core-common: chứa các class dùng chung
 - HibernateUtils: Khởi tạo đối tượng sessionfactory

ORM: Object Relational Mapping
persistence-object: POJOs
SessionFactory? Gap dau tien khi kết nối db (để kết nối) => tạo ra đối tượng session
Session: 
- Sinh ra những câu truy vấn (query), thực thi những câu lệnh truy vấn
Transaction:
- Thực hiện query (process thực thi đều nằm trong transaction ->  mở - thực thi - đóng (nếu fail -> cơ chế roll back)

17.4: Xây dựng persistence entity
core-persistence-data: Chứa entity
sử dụng 2 anotation: @Entity: đánh dấu là 1 entity
@Table(name="table_name") map với table trong database
- Tạo entity mới, phải khai báo mapping trong hibernate => map giữa entity class và database
- Muốn sử dụng module khác -> add dependencies của module đó trong pom.xml
18/5:
Bài 17: Xây dựng API FindAll and Update() dùng chung cho hệ thống
AbstractDAO<ID,T> impl GenericDAO<ID,T>
exp: RoleDao imp GenericDAO<int,RoleEntity> => map persistence với entity
RoleDaoImpl extends AbstractDao<Integer,RoleEntity> implements RoleDao
Khi khởi tạo RoleDao  = RoleDaoImpl thì persistence trong AbstracDAO sẽ được khởi tạo qua constructor và persistence được gán với kiểu T = RoleEntity
Tính chất của generic?
Interface: Thể hiện thuộc tính riêng của con(impl interface) mà cha(class) không có
----
Bài 18: Xây dựng test và các class DAO Impl
core-dto: hiển thị dữ liệu lên web
- web - DTO - entity =>:
retrieve: entity -> DTO
save: DTO -> entity

interface không thể khởi tạo đối tượng -> khởi tạo theo implements
---25/04---
19 + 20: xây dựng các hàm common update, save, find by ID
---------------
Bài 21: xây dựng hàm findByProperty() thuộc tính
Bài 22.1: xây dựng API delete
------------
28/05/2019
Bài 23.1 Xây dựng giao diện pj sử dụng sitemesh decorate p1
- add library
- create filter web xml, decorate config
23.2
web 2 phan rieng biet: web và admin
decorators: 2 phần
- page cha: master layout
- page con: phần thừa hưởng, thay đổi ở giữa 
- update master layout + child (common + decorators)
...
 create admin/web body
 add empty common master layout(header/footer/menu)
- command -> model (toeic web logic)
- create HomeController for admin/web
...............
01/06:
24.1 Tạo giao diện admin sử dụng template có sẵn + sitemesh
- add asset bootstrap to project
- add filter login for decorator
- add footer/header for login page (decorate)
............
- design login page

03/06
include header template from template index.html
using c:url(of jstl) -> khai báo vị trí của folder trong project
...
create login controler
create login GUI from template
update header footer for login page

Bài 25: Viết API login
- using resource bundle

Bài 26: thực hiện chức năng đăng nhập
- insert data for user (role 1-2)
- create Role + user DTO
- Tạo hàm chuyển đổi dữ liệu giữa DTO và entity -> trong package util: Role, User
- change core-test -> api-test
pojo(DTO)

-----
12/06/2019
Bài 27: Using Log
- create Log4j config - toeic-web
- update login for login-page-view
Bài 28: Sử dụng common bean utils trong servlet
Bài 29: xây dựng chức năng login
- create dao check user exist
- create test for check user exist + get role user
29.1:
update login view
add webconstant value
using JSTL c:if
update login controller check login with name pass and role
finish Login function

Bài 30: Xây dựng giao diện trang admin và trang web của người dùng sử dụng sitemesh decorator
- update admin view (update header/ menu (via treeview), body
23/06
- update lib
- update template for admin
- desig view for web
- add lib for web template
- update header/footer for web

Bài 31.1: Sử dụng display tag = cấu hình, thêm thư viện
http://displaytag.sourceforge.net/11/tut_externalSortAndPage.html
Bài 31.2: Tạo và phân trang chức năng listen guidline (admin page)
update resource bundle Application resource
create 

Bài 32: Clean code lại chức năng login
- refactor dao code for get user
Bài 33: Sử dụng display để thực hành phân trang
add listenguidle dto
demo display tag for listenguidle
add listenguideline command
update view for list listen guideline

Bài 34.1: Create API support paging/sort and improve API findByProperty
update findProperty function and hibernate sql
add fake data for listen guideline
create ListenGuideLine test

34.2:
create ListenGuidelineService
http://displaytag.sourceforge.net/11/tut_externalSortAndPage.html
define the value will get from display tag UI: pagesize/sort...
add Api initSearchBean for display tag

35.1: sort and paging in display tag
- create listenguideline converter
- update doget listenguideline
- define findListenGuidelineByProperties for listenguideline service

Bài 35.2
update data respond for get listenguideline
update list.jsp requestURL
update findByProperty return count all rows

Bài 36: Ôn tập Hashet và hashmap
Bài 37.1: Cải thiện API findByProperty
dang tim kiem theo mot truong duy nhat -> update tim kiem theo nhieu tieu chi -> su dung map
update findByProperty params

Bai 37.2: update testng
Bai 38: Sử dụng resource bundle trong servlet
Bai 39: use urlpatterns in servlet
- Trong 1 servlet có thể sử dụng nhiều url
- update link to empty list page (using url pattern and Form util and jstl url)
